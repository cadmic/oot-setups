#include "actor.hpp"
#include "animation.hpp"
#include "collider.hpp"
#include "search.hpp"
#include "sys_math.hpp"

Limb gHorseIngoSkel[] = {
    { { 0, 4820, -1965 }, 0x01, LIMB_DONE },
    { { 0, 505, -1338 }, 0x02, 0x05 },
    { { 0, 0, 0 }, 0x03, LIMB_DONE },
    { { 1217, 0, 0 }, 0x04, LIMB_DONE },
    { { 2387, 0, 0 }, LIMB_DONE, LIMB_DONE },
    { { -3, 171, 1984 }, LIMB_DONE, 0x06 },
    { { 0, 68, 710 }, 0x07, 0x1F },
    { { 0, 0, 0 }, 0x08, LIMB_DONE },
    { { 1681, 0, 0 }, 0x09, 0x1E },
    { { 2122, 0, 0 }, 0x0A, 0x0E },
    { { 1406, 0, 0 }, 0x0B, LIMB_DONE },
    { { 1304, 0, 0 }, 0x0C, LIMB_DONE },
    { { 1781, 0, 0 }, LIMB_DONE, 0x0D },
    { { 0, 0, 0 }, LIMB_DONE, LIMB_DONE },
    { { 1338, 341, 756 }, 0x0F, 0x16 },
    { { 0, 0, 0 }, 0x10, LIMB_DONE },
    { { 605, 0, 0 }, 0x11, LIMB_DONE },
    { { 2419, 0, 0 }, 0x12, LIMB_DONE },
    { { 1459, 0, 0 }, 0x13, 0x15 },
    { { 660, 0, 0 }, LIMB_DONE, 0x14 },
    { { 0, 1, 0 }, LIMB_DONE, LIMB_DONE },
    { { 0, 0, 0 }, LIMB_DONE, LIMB_DONE },
    { { 1338, 341, -756 }, 0x17, LIMB_DONE },
    { { 0, 0, 0 }, 0x18, LIMB_DONE },
    { { 605, 0, 0 }, 0x19, LIMB_DONE },
    { { 2419, 0, 0 }, 0x1A, LIMB_DONE },
    { { 1459, 0, 0 }, 0x1B, 0x1D },
    { { 660, 0, 0 }, LIMB_DONE, 0x1C },
    { { 0, 0, 0 }, LIMB_DONE, LIMB_DONE },
    { { 0, 0, 0 }, LIMB_DONE, LIMB_DONE },
    { { 0, 0, 0 }, LIMB_DONE, LIMB_DONE },
    { { 655, -151, -593 }, 0x20, 0x27 },
    { { 0, 0, 0 }, 0x21, LIMB_DONE },
    { { 1123, 0, 0 }, 0x22, LIMB_DONE },
    { { 2330, 0, 0 }, 0x23, LIMB_DONE },
    { { 1573, 0, 0 }, 0x24, 0x26 },
    { { 598, 0, 0 }, LIMB_DONE, 0x25 },
    { { 0, 0, 0 }, LIMB_DONE, LIMB_DONE },
    { { 0, 0, 0 }, LIMB_DONE, LIMB_DONE },
    { { -655, -151, -593 }, 0x28, LIMB_DONE },
    { { 0, 0, 0 }, 0x29, LIMB_DONE },
    { { 1123, 0, 0 }, 0x2A, LIMB_DONE },
    { { 2330, 0, 0 }, 0x2B, LIMB_DONE },
    { { 1573, 0, 0 }, 0x2C, 0x2E },
    { { 598, 0, 0 }, LIMB_DONE, 0x2D },
    { { 0, 0, 0 }, LIMB_DONE, LIMB_DONE },
    { { 0, 0, 0 }, LIMB_DONE, LIMB_DONE },
};

u16 sHorseIngoRearingAnimFrameData[] = {
    0x0000, 0x4000, 0x8C17, 0x0004, 0x0000, 0x0029, 0x004C, 0xFFE6, 0xFE77, 0xFB70, 0xF73B, 0xF2C6, 0xEF01, 0xECDA, 
    0xEBE4, 0xEB16, 0xEA71, 0xE9F6, 0xE9A8, 0xE988, 0xE997, 0xE9D6, 0xEA48, 0xEAEE, 0xEBC8, 0xECDA, 0xEEBF, 0xF1CC, 
    0xF590, 0xF99F, 0xFD89, 0x00E0, 0x0336, 0x03C8, 0x02C8, 0x0138, 0x001A, 0x12F0, 0x12DB, 0x12A9, 0x126C, 0x1237, 
    0x120F, 0x11EC, 0x11C6, 0x11A2, 0x118E, 0x1188, 0x1183, 0x117F, 0x117C, 0x117A, 0x1178, 0x1178, 0x117A, 0x117C, 
    0x117F, 0x1184, 0x118A, 0x119A, 0x11B6, 0x11D9, 0x11FC, 0x1220, 0x1249, 0x126E, 0x128C, 0x12A7, 0x12CD, 0x12ED, 
    0xF853, 0xF85C, 0xF86E, 0xF882, 0xF88E, 0xF882, 0xF873, 0xF876, 0xF87E, 0xF882, 0xF880, 0xF87E, 0xF87A, 0xF876, 
    0xF872, 0xF86D, 0xF869, 0xF866, 0xF863, 0xF862, 0xF861, 0xF863, 0xF86F, 0xF886, 0xF89D, 0xF8A6, 0xF894, 0xF872, 
    0xF853, 0xF841, 0xF839, 0xF843, 0xF852, 0xD20E, 0xD360, 0xD6EC, 0xDC11, 0xE22C, 0xE89E, 0xEEC5, 0xF3FF, 0xF7AC, 
    0xF92B, 0xF8C9, 0xF75F, 0xF519, 0xF221, 0xEEA4, 0xEACF, 0xE6CD, 0xE2C9, 0xDEF1, 0xDB6F, 0xD871, 0xD621, 0xD585, 
    0xD6B2, 0xD86E, 0xD97C, 0xD8A3, 0xCF5D, 0xC6A5, 0xC7CF, 0xCBCD, 0xD011, 0xD20E, 0xEF9D, 0xF017, 0xF16C, 0xF373, 
    0xF607, 0xF8FF, 0xFC35, 0xFF81, 0x02BC, 0x05BF, 0x0863, 0x0A80, 0x0BEF, 0x0C8A, 0x0BBF, 0x0959, 0x05B7, 0x0139, 
    0xFC3F, 0xF728, 0xF254, 0xEAA2, 0xE1A7, 0xDEC9, 0xE454, 0xEDD8, 0xF8AD, 0x022B, 0x07A7, 0xFE75, 0xF0F6, 0xEEC2, 
    0xEF9D, 0x8507, 0x8507, 0x8507, 0x8507, 0x8507, 0x8507, 0x8507, 0x8507, 0x8507, 0x8507, 0x8509, 0x850D, 0x8514, 
    0x851B, 0x8522, 0x8528, 0x852D, 0x852E, 0x852C, 0x8526, 0x851A, 0x8507, 0x84E0, 0x849E, 0x844E, 0x83FA, 0x83B0, 
    0x837B, 0x8366, 0x83A6, 0x8434, 0x84C3, 0x8507, 0xEEE2, 0xEEFC, 0xEF4A, 0xEFCD, 0xF153, 0xEF46, 0xECA1, 0xE9E8, 
    0xE7A1, 0xE653, 0xE5C3, 0xE55C, 0xE51A, 0xE4F7, 0xE4F0, 0xE500, 0xE523, 0xE555, 0xE590, 0xE5D1, 0xE614, 0xE653, 
    0xE6B8, 0xE75D, 0xE827, 0xE8FE, 0xE9C9, 0xEA6C, 0xEACF, 0xE963, 0xE85D, 0xEBDB, 0xEEE2, 0xE3D2, 0xE711, 0xEE35, 
    0xF55A, 0xF899, 0xF6A2, 0xF1DF, 0xEC03, 0xE6C3, 0xE3D2, 0xE2BF, 0xE1F6, 0xE16E, 0xE122, 0xE109, 0xE11E, 0xE159, 
    0xE1B4, 0xE227, 0xE2AD, 0xE33D, 0xE3D2, 0xE4DA, 0xE697, 0xE8B7, 0xEAEA, 0xECE0, 0xEE48, 0xEED2, 0xED21, 0xE965, 
    0xE59F, 0xE3D2, 0xF15D, 0xF325, 0xF711, 0xFAFD, 0xFCC5, 0xFBB1, 0xF914, 0xF5DC, 0xF2FA, 0xF15D, 0xF0C7, 0xF05A, 
    0xF013, 0xEFEC, 0xEFE2, 0xEFF0, 0xF012, 0xF045, 0xF084, 0xF0CA, 0xF114, 0xF15D, 0xF1DC, 0xF2B2, 0xF3B8, 0xF4C7, 
    0xF5B9, 0xF666, 0xF6A9, 0xF5D8, 0xF40C, 0xF23B, 0xF15D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0010, 0x0030, 
    0x0048, 0x0040, 0x0000, 0xFF69, 0xFE8A, 0xFD90, 0xFCA6, 0xFBF9, 0xFBB5, 0xFBFB, 0xFCAD, 0xFD9B, 0xFE98, 0xFF74, 
    0x0000, 0x003E, 0x0056, 0x0053, 0x003E, 0x0022, 0x000A, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4274, 0x43CA, 
    0x46BB, 0x49AC, 0x4B02, 0x4A33, 0x483D, 0x45D4, 0x43AA, 0x4274, 0x4203, 0x41B0, 0x4179, 0x4159, 0x414F, 0x4158, 
    0x4171, 0x4196, 0x41C6, 0x41FC, 0x4237, 0x4274, 0x42B9, 0x4312, 0x4388, 0x441F, 0x44DE, 0x45CC, 0x46EF, 0x4AE9, 
    0x4DB4, 0x47D6, 0x4274, 0x9348, 0x93EC, 0x956E, 0x9730, 0x9894, 0x984B, 0x978C, 0x96B6, 0x95EC, 0x9552, 0x950D, 
    0x9507, 0x950D, 0x9513, 0x9524, 0x9532, 0x955E, 0x95B4, 0x9609, 0x9632, 0x9604, 0x9552, 0x93DC, 0x91B2, 0x8F24, 
    0x8C84, 0x8A20, 0x87C9, 0x862F, 0x881C, 0x9348, 0x9437, 0x9348, 0x0000, 0x0027, 0x0068, 0x0075, 0x0000, 0xFBED, 
    0xFC3C, 0xFD2F, 0xFE51, 0xFF2F, 0xFFC3, 0x0021, 0x0000, 0xFEEB, 0xFD57, 0xFC55, 0xFC11, 0xFBF8, 0xFC04, 0xFC2D, 
    0xFC6E, 0xFCBE, 0xFD38, 0xFDE6, 0xFEAC, 0xFF69, 0x0000, 0x0027, 0x0011, 0xFFFE, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFF3C, 0xFE4A, 0xFD7D, 0xFD26, 0xFDC8, 0xFF0D, 0x0000, 0x0036, 0x001B, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFE, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x365A, 0x2FB3, 0x26A7, 0x23B7, 0x2334, 0x26D0, 0x18BD, 0x0736, 0xF73D, 0xEDD4, 
    0xF083, 0xFBE7, 0x079B, 0x1375, 0x1FA1, 0x2440, 0x1F73, 0x1644, 0x0B32, 0x00BC, 0xF95F, 0xF79B, 0xFDD6, 0x0AAC, 
    0x1AE7, 0x2B54, 0x38C0, 0x408E, 0x438C, 0x3C6E, 0x3863, 0x36DF, 0x365A, 0xF658, 0x04FE, 0x183A, 0x1C0B, 0x1B03, 
    0x16A8, 0x1F37, 0x2A3B, 0x344A, 0x39FA, 0x35E6, 0x2C13, 0x2736, 0x2DC2, 0x3945, 0x411C, 0x4415, 0x4682, 0x4805, 
    0x483E, 0x46CF, 0x4359, 0x3C74, 0x320F, 0x25D7, 0x1975, 0x0E95, 0x055C, 0x0064, 0x0B65, 0xFDAD, 0xF848, 0xF658, 
    0xFFFC, 0xF682, 0xEA15, 0xE489, 0xE85A, 0x1087, 0x1FA8, 0x2BA4, 0x3536, 0x3D1A, 0x41C3, 0x4300, 0x4396, 0x446E, 
    0x449F, 0x4433, 0x43F6, 0x443D, 0x445D, 0x43A9, 0x4177, 0x3D1A, 0x3545, 0x2A33, 0x1D84, 0x10D9, 0x05D1, 0xFEBA, 
    0xF969, 0xF376, 0xFD8A, 0xFFCC, 0xFFFC, 0x9348, 0x9423, 0x962C, 0x9898, 0x9A9E, 0x9B11, 0x9ACB, 0x9A66, 0x9A06, 
    0x99CD, 0x99C0, 0x99C6, 0x99D7, 0x99F0, 0x9A09, 0x9A1C, 0x9A34, 0x9A3F, 0x9A6A, 0x9AB5, 0x9AA9, 0x99CD, 0x97FE, 
    0x9595, 0x92D8, 0x900F, 0x8D7F, 0x8B11, 0x894E, 0x8A72, 0x9348, 0x9405, 0x9348, 0x0000, 0xFFA6, 0xFF10, 0xFEF2, 
    0x0000, 0x095F, 0x09A0, 0x08A5, 0x0703, 0x054C, 0x0239, 0x0000, 0x0108, 0x0320, 0x052F, 0x061D, 0x0320, 0x0000, 
    0x008C, 0x021B, 0x03BB, 0x047B, 0x041F, 0x0338, 0x020C, 0x00E2, 0x0000, 0xFFCA, 0xFFE9, 0x0003, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0001, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x365A, 0x32F0, 0x2B1C, 0x227D, 0x1CAF, 0x2669, 0x206B, 0x180C, 
    0x0F3B, 0x07E7, 0x048D, 0x02C8, 0xFED5, 0xFA12, 0xF6C6, 0xF738, 0x05A2, 0x1542, 0x1803, 0x1759, 0x1660, 0x1833, 
    0x1DB4, 0x2503, 0x2D1B, 0x34F8, 0x3B95, 0x3F26, 0x3FBA, 0x3A9A, 0x3863, 0x3706, 0x365A, 0xF658, 0xFAD2, 0x052B, 
    0x10C3, 0x18FA, 0x0F43, 0x1B13, 0x2A9F, 0x3983, 0x4359, 0x3D2F, 0x3256, 0x2FE2, 0x2EFA, 0x2EB9, 0x2E39, 0x2C6B, 
    0x2CD4, 0x332E, 0x3C1F, 0x430B, 0x4359, 0x3B5A, 0x2E45, 0x1ED9, 0x0FD6, 0x03FB, 0x0009, 0x01D5, 0x0A57, 0xFDAD, 
    0xF85F, 0xF658, 0xFFFC, 0xFCE5, 0xF663, 0xF09A, 0xEFB0, 0x0E7D, 0x1BF2, 0x277E, 0x30A9, 0x36FD, 0x3AB4, 0x3CB0, 
    0x3D7B, 0x3D9D, 0x3DA0, 0x3E0A, 0x3E34, 0x3D61, 0x3CFE, 0x3CFE, 0x3B96, 0x36FD, 0x2E62, 0x2321, 0x16B5, 0x0A99, 
    0x0049, 0xFB76, 0xF886, 0xF0DD, 0xFDF2, 0x0038, 0xFFFC, 0x0000, 0xFFD2, 0xFF64, 0xFEDB, 0xFE5F, 0xFDED, 0xFD6F, 
    0xFCEB, 0xFC6A, 0xFBF3, 0xFB8F, 0xFB45, 0xFB1C, 0xFB0A, 0xFAFE, 0xFAF7, 0xFAF5, 0xFAF8, 0xFB00, 0xFB0E, 0xFB21, 
    0xFB39, 0xFB56, 0xFB79, 0xFBA0, 0xFBCD, 0xFBFF, 0xFC36, 0xFC72, 0xFD23, 0xFE58, 0xFF7D, 0x0000, 0x0000, 0xFFEA, 
    0xFFAE, 0xFF57, 0xFEF0, 0xFE68, 0xFDBE, 0xFD11, 0xFC82, 0xFC2F, 0xFC09, 0xFBE8, 0xFBCD, 0xFBB8, 0xFBAA, 0xFBA4, 
    0xFBA6, 0xFBAF, 0xFBC1, 0xFBDD, 0xFC01, 0xFC2F, 0xFC80, 0xFD01, 0xFDA1, 0xFE4E, 0xFEF9, 0xFF8F, 0x0000, 0x0032, 
    0x002C, 0x0011, 0x0000, 0x0000, 0xFFE1, 0xFF91, 0xFF21, 0xFEA2, 0xFE04, 0xFD41, 0xFC7D, 0xFBDA, 0xFB7D, 0xFB50, 
    0xFB2A, 0xFB0A, 0xFAF2, 0xFAE2, 0xFADA, 0xFADC, 0xFAE6, 0xFAFB, 0xFB1B, 0xFB46, 0xFB7D, 0xFBDC, 0xFC75, 0xFD32, 
    0xFDFF, 0xFEC9, 0xFF7A, 0x0000, 0x003B, 0x0035, 0x0014, 0x0000, 0x9C2E, 0x9BD5, 0x9B3B, 0x9B08, 0x9BE2, 0x9E4C, 
    0xA1CA, 0xA58B, 0xA8BE, 0xAA91, 0xAB5D, 0xAC09, 0xAC92, 0xACF7, 0xAD37, 0xAD51, 0xAD45, 0xAD0F, 0xACB1, 0xAC28, 
    0xAB73, 0xAA91, 0xA8FD, 0xA673, 0xA34F, 0x9FF0, 0x9CB4, 0x99F8, 0x981B, 0x9801, 0x997D, 0x9B4C, 0x9C2E, 0x3DEE, 
    0x3E74, 0x3FCC, 0x41A5, 0x43A9, 0x4585, 0x478D, 0x49E1, 0x4BE7, 0x4D01, 0x4D6D, 0x4DCC, 0x4E1C, 0x4E5A, 0x4E84, 
    0x4E97, 0x4E91, 0x4E6E, 0x4E2D, 0x4DCB, 0x4D45, 0x4C99, 0x4B71, 0x49A1, 0x4764, 0x44F4, 0x428C, 0x4066, 0x3EBF, 
    0x3DDB, 0x3DA3, 0x3DC5, 0x3DEE, 0xD8E3, 0xD86D, 0xD72E, 0xD55A, 0xD324, 0xD0BF, 0xCE60, 0xCC3A, 0xCA80, 0xC967, 
    0xC8C0, 0xC83A, 0xC7D5, 0xC791, 0xC76C, 0xC768, 0xC782, 0xC7BC, 0xC814, 0xC88A, 0xC91E, 0xC9D0, 0xCAF6, 0xCCC4, 
    0xCEFE, 0xD16C, 0xD3D3, 0xD5FB, 0xD7AA, 0xD8A0, 0xD8F6, 0xD8F4, 0xD8E3, 0x0BD1, 0x0C0D, 0x0CB1, 0x0DA1, 0x0EC2, 
    0x0FF8, 0x1129, 0x123A, 0x1310, 0x138F, 0x13CD, 0x13F4, 0x1406, 0x1404, 0x13EF, 0x13CA, 0x1396, 0x1355, 0x1308, 
    0x12B2, 0x1253, 0x11ED, 0x115B, 0x1087, 0x0F88, 0x0E77, 0x0D6E, 0x0C83, 0x0BD1, 0x0B81, 0x0B8A, 0x0BB6, 0x0BD1, 
    0x0000, 0x000F, 0x0036, 0x0072, 0x00BC, 0x0120, 0x019E, 0x021F, 0x028A, 0x02C7, 0x02E4, 0x02FD, 0x0310, 0x031F, 
    0x0329, 0x032E, 0x032D, 0x0325, 0x0318, 0x0304, 0x02E9, 0x02C7, 0x028C, 0x022F, 0x01BA, 0x013C, 0x00C0, 0x0052, 
    0x0000, 0xFFDC, 0xFFE0, 0xFFF4, 0x0000, 0x0000, 0x002D, 0x00A2, 0x0147, 0x0204, 0x02F3, 0x0419, 0x0542, 0x0639, 
    0x06C6, 0x070A, 0x0743, 0x0773, 0x0797, 0x07AF, 0x07BB, 0x07B9, 0x07A8, 0x0789, 0x0759, 0x0719, 0x06C6, 0x0636, 
    0x0552, 0x0436, 0x0302, 0x01D3, 0x00C9, 0x0000, 0xFFA7, 0xFFB1, 0xFFE2, 0x0000, 0x9D66, 0x9CE6, 0x9BF2, 0x9B5E, 
    0x9BFF, 0x9E60, 0xA1ED, 0xA5C8, 0xA915, 0xAAF5, 0xABC6, 0xAC75, 0xAD00, 0xAD68, 0xADA9, 0xADC4, 0xADB7, 0xAD81, 
    0xAD21, 0xAC95, 0xABDC, 0xAAF5, 0xA956, 0xA6B6, 0xA379, 0xA001, 0x9CB2, 0x99EF, 0x981B, 0x983D, 0x9A23, 0x9C57, 
    0x9D66, 0x3D86, 0x3E10, 0x3F74, 0x415A, 0x436A, 0x454B, 0x474B, 0x498E, 0x4B84, 0x4C99, 0x4D0A, 0x4D6F, 0x4DC7, 
    0x4E0F, 0x4E43, 0x4E60, 0x4E65, 0x4E4D, 0x4E16, 0x4DBD, 0x4D3F, 0x4C99, 0x4B76, 0x49AB, 0x4770, 0x4501, 0x4298, 
    0x406E, 0x3EBF, 0x3DC5, 0x3D6A, 0x3D6B, 0x3D86, 0xD87B, 0xD808, 0xD6D3, 0xD50D, 0xD2E7, 0xD094, 0xCE45, 0xCC2D, 
    0xCA7D, 0xC967, 0xC8BE, 0xC833, 0xC7C5, 0xC776, 0xC745, 0xC733, 0xC741, 0xC76E, 0xC7BC, 0xC829, 0xC8B8, 0xC967, 
    0xCA94, 0xCC70, 0xCEBF, 0xD143, 0xD3BF, 0xD5F5, 0xD7AA, 0xD890, 0xD8C2, 0xD89C, 0xD87B, 0x0BD1, 0x0C0D, 0x0CAF, 
    0x0D9E, 0x0EBD, 0x0FF2, 0x1123, 0x1234, 0x130C, 0x138F, 0x13D3, 0x1403, 0x141E, 0x1427, 0x141F, 0x1406, 0x13DD, 
    0x13A7, 0x1363, 0x1314, 0x12BA, 0x1256, 0x11BF, 0x10DE, 0x0FCE, 0x0EAA, 0x0D8C, 0x0C90, 0x0BD1, 0x0B7B, 0x0B85, 
    0x0BB4, 0x0BD1, 
};

JointIndex sHorseIngoRearingAnimJointIndices[] = {
    { 0x0000, 0x0025, 0x0046 },
    { 0x0004, 0x0000, 0x0000 },
    { 0x0000, 0x0001, 0x0000 },
    { 0x0000, 0x0000, 0x0067 },
    { 0x0000, 0x0000, 0x0088 },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0001, 0x0000 },
    { 0x0000, 0x0000, 0x00A9 },
    { 0x0000, 0x0000, 0x00CA },
    { 0x0000, 0x0000, 0x00EB },
    { 0x0000, 0x0000, 0x010C },
    { 0x012D, 0x0000, 0x014E },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0000, 0x0002 },
    { 0x0000, 0x0000, 0x016F },
    { 0x0190, 0x01B1, 0x01D2 },
    { 0x0000, 0x0000, 0x01F3 },
    { 0x0000, 0x0000, 0x0214 },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0000, 0x0003 },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0000, 0x0002 },
    { 0x0000, 0x0000, 0x0235 },
    { 0x0256, 0x0277, 0x0298 },
    { 0x0000, 0x0000, 0x02B9 },
    { 0x0000, 0x0000, 0x02DA },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0000, 0x02FB },
    { 0x0000, 0x0001, 0x0000 },
    { 0x031C, 0x033D, 0x035E },
    { 0x0000, 0x0000, 0x037F },
    { 0x0000, 0x0000, 0x03A0 },
    { 0x0000, 0x0000, 0x03C1 },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0001, 0x0000 },
    { 0x03E2, 0x0403, 0x0424 },
    { 0x0000, 0x0000, 0x0445 },
    { 0x0000, 0x0000, 0x0466 },
    { 0x0000, 0x0000, 0x0487 },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0x0000, 0x0000 },
};

AnimationHeader gHorseIngoRearingAnim = { 
    33, sHorseIngoRearingAnimFrameData, sHorseIngoRearingAnimJointIndices, 4
};

// height, yshift
std::vector<std::pair<int, int>> rollCylinders = {
    { 46, 12 },
    { 45, 11 },
    { 34, 6 },
    { 10, 14 },
    { 5, 19 },
    { 14, 19 },
    { 1, 21 },
    { 11, 13 },
    { 24, 6 },
    { 27, 6 },
    { 30, 5 },
    { 32, 5 },
    { 32, 5 },
    { 33, 5 },
};

bool simulateRoll(Vec3f pos, u16 angle, Vec3s horseBody, const std::vector<Vec3s>& horseHead, int* outNeighFrame, int* outStrainDir, bool debug) {
    f32 xzSpeed = 0.0f;
    int jumpFrame = -1;
    for (int i = 1; i < 10; i++) {
        if (debug) {
            printf("roll frame %d: angle=%04x x=%.9g y=%.9g z=%.9g xzSpeed=%.1f\n",
                i, angle, pos.x, pos.y, pos.z, xzSpeed);
        }

        Vec3f bodyPush = immovablePush(pos, Vec3f(horseBody), 20.0f);
        pos = translate(pos, angle, xzSpeed, -5.0f, bodyPush);

        if (pos.x >= 284.0f && pos.x <= 306.0f && pos.z <= -828.0f) {
            pos.y = 37.0f;
        } else {
            jumpFrame = i;
            break;
        }

        xzSpeed = std::min(xzSpeed + 2.0f, 9.0f);
    }

    Vec3f jumpPos = pos;
    u16 jumpAngle = angle;
    if (!(jumpFrame == 5 || jumpFrame == 8 || jumpFrame == 9)) {
        if (debug) {
            printf("bad jump jumpFrame=%d\n", jumpFrame);
        }
        return false;
    }

    if (debug) {
        printf("jump frame: x=%.9g y=%.9g z=%.9g\n", pos.x, pos.y, pos.z);
    }

    for (int strainDir : {-1, 1}) {
        pos = jumpPos;
        angle = jumpAngle + 0x12c * strainDir;

        Vec3f bodyPush = immovablePush(pos, Vec3f(horseBody), 20.0f);
        pos = translate(pos, angle, 6.0f, 6.5f, bodyPush);

        if (debug) {
            printf("test push: strainDir=%d x=%.9g y=%.9g z=%.9g\n", strainDir, pos.x, pos.y, pos.z);
        }

        for (int neighFrame : {27, 28}) {
            if (neighFrame == 28 && jumpFrame != 8) {
                continue;
            }

            Vec3s posTrunc = pos.toVec3s();
            Vec3s headPos = horseHead[neighFrame];
            if (posTrunc.x == headPos.x + 1 && posTrunc.z == headPos.z + 2) {
                if (debug) {
                    printf("success neighFrame=%d\n", neighFrame);
                }
                *outNeighFrame = neighFrame;
                *outStrainDir = strainDir;
                return true;
            }
        }
    }

    if (debug) {
        printf("no push\n");
    }
    return false;
}

Vec3s generateHorseBody(Vec3f pos, u16 angle) {
    pos.y -= 11.25f;  // gravity
    Vec3s bodyPos = pos.toVec3s();

    bodyPos.x += (s16)(Math_SinS(angle) * 11.0f);
    bodyPos.z += (s16)(Math_CosS(angle) * 11.0f);

    return bodyPos;
}

std::vector<Vec3s> generateHorseHeads(Vec3f pos, u16 angle) {
    std::vector<Vec3s> result;

    for (int i = 0; i < 33; i++) {
        int limbCount = ARRAY_COUNT(gHorseIngoSkel);
        Vec3s jointTable[limbCount];
        MtxF limbMatrices[limbCount];
        Vec3f rootPos;

        loadAnimFrame(&gHorseIngoRearingAnim, limbCount, i, &rootPos, jointTable);
        applySkeleton(gHorseIngoSkel, jointTable, pos, angle, rootPos, limbMatrices);

        Vec3f sZeroVec = {0.0f, 0.0f, 0.0f};
        Vec3f headPos;
        SkinMatrix_Vec3fMtxFMultXYZ(&limbMatrices[13], &sZeroVec, &headPos);

        result.push_back(headPos.toVec3s());
    }

    return result;
}

void searchRolls(Vec3f horsePos, u16 horseAngle) {
    PosAngleRange range = {
        .angleMin = -0x0800,
        .angleMax = 0x0800,
        .xMin = 284,
        .xMax = 306,
        .xStep = 0.1f,
        .zMin = -902,
        .zMax = -838,
        .zStep = 0.1f,
    };

    Vec3s horseBody = generateHorseBody(horsePos, horseAngle);
    std::vector<Vec3s> horseHeads = generateHorseHeads(horsePos, horseAngle);

    searchPosAngleRange(range, [&](u16 angle, f32 x, f32 z) {
        bool found = false;

        Vec3f pos = {x, 37, z};
        int neighFrame;
        int strainDir;
        if (simulateRoll(pos, angle, horseBody, horseHeads, &neighFrame, &strainDir, false)) {
            printf("angle=%04x x=%.9g z=%.9g x_raw=%08x z_raw=%08x neighFrame=%d strainDir=%d\n", angle, x, z, floatToInt(x), floatToInt(z), neighFrame, strainDir);
            found = true;
        }
        return found;
    });
}

int main(int argc, char* argv[]) {
    Vec3f horsePos = {intToFloat(0x437a85b0), 0, intToFloat(0xc44a1b56)};
    u16 horseAngle = 0x48b1;

    // Vec3f linkPos = {intToFloat(0x43954000), 37, intToFloat(0xc45ed814)};
    // u16 linkAngle = 0xf93e;

    // Vec3s horseBody = generateHorseBody(horsePos, horseAngle);
    // std::vector<Vec3s> horseHeads = generateHorseHeads(horsePos, horseAngle);
    // int neighFrame;
    // int strainDir;
    // simulateRoll(linkPos, linkAngle, horseBody, horseHeads, &neighFrame, &strainDir, true);

    searchRolls(horsePos, horseAngle);

    return 0;
}
